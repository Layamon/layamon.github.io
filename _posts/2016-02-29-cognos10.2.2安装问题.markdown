---
layout: post
title: cognos10.2.2安装问题
date: 2016-02-29 10:53
categories: jekyll update
---

#### 前端展示页面太粗糙了，然后把web contetn 拷到 p2pd下面，但是还是没有用 并且这次biserver居然启动不了了

后面重装了系统，打了新的补丁，居然好了

#### server接收不到服务启动成功的响应消息，但是top看到扔有进程再跑，cpu满负荷运转
> cpu满负荷运转，server有的时候能收到成功的响应消息，有的时候收不到，但是不管显示启动成功与否，网页依然是打不开

top命令查看后，发现cognosserver这个进程的cpu占用达到500% 这必然是多线程导致的，但是看上面的cpu利用率则是50%,很疑惑，这应该是系统每个核心超线程数是2个，没有启用超线程，启用超线程应该是要在bios中设置
上面500%然后就卡住了，仔细想想应该是系统开启多线程但是资源争取不到，然后就在cognos的配置页面上找到线程数相关的配置和内存数相关的配置，线程数调小，内存预分配调大，但是还是没有解决问题
在系统启动后除了在配置页面上，可以找到相关的配置，在管理页面上，也能配置相关的配置，我转到QueryService的配置，将相关资源参数调大，但是没有解决问题。
后来注意到，cognosserver启动是一个java的进程，前面有一大串参数，其中有涉及 headsize 和 permsize的，在系统启动后,这些参数应该是改不了了，所以在系统启动之前应该配置好
到底应该在哪配置呢，我之前一直在一个configuration这个文件夹下找配置文件，使用grep命令找到配置文件中，出现这个参数字符串的所有字符，但是没有找到。
最后居然这相关的配置文件是在bin64目录下，十分蛋疼，明明是配置文件，为什么不放在配置文件专门的目录下
然后在这个bin64下面，grep了一下，找到相应的参数，调大，完成！

这里涉及java的启动参数 
Xms Xmx PermSize MaxPermSize

顺便学习了java大法的jvm内存相关
每运行一个java程序会产生一个java进程，每个java进程可能包含一个或者多个线程，每一个Java进程对应唯一一个JVM实例，每一个JVM实例唯一对应一个堆，每一个线程有一个自己私有的栈。进程所创建的所有类的实例（也就是对象）或数组（指的是数组的本身，不是引用）都放在堆中,并由该进程所有的线程共享。Java中分配堆内存是自动初始化的，即为一个对象分配内存的时候，会初始化这个对象中变量。虽然Java中所有对象的存储空间都是在堆中分配的，但是这个对象的引用却是在栈中分配,也就是说在建立一个对象时在堆和栈中都分配内存，在堆中分配的内存实际存放这个被创建的对象的本身，而在栈中分配的内存只是存放指向这个堆对象的引用而已。局部变量 new 出来时，在栈空间和堆空间中分配空间，当局部变量生命周期结束后，栈空间立刻被回收，堆空间区域等待GC回收

Runtime data area:
运行时数据，主要分为三个区域，Heap，Perm，Native thread

从运行一个java进程来理解，一个java进程会使用到jvm的内存(Heap,Perm)和除jvm之外的内存
在java中每new一个线程，jvm都是向操作系统请求new一个本地线程，
不像是heap和Perm，jvm没有设定总的stack大小，只是设定每个stack的大小，
这也是因为线程栈是从OS内存中分配的
