---
layout: post
title: Architecture Of Database
subtitle: 翻译
date: 2018-06-20 15:50
header-img: "img/head.jpg"
categories: jekyll update
tags:
   - DB
typora-root-url: ../../SAR
---

​	数据库管理系统（DBMS）是现代计算中无处不在的关键组件，也是学术界和工业界数十年研究和开发的成果。从历史上看，数据库管理系统是最早开发的多用户服务器系统之一，因此率先开发了许多系统设计技术，以便在许多其他环境中使用，以实现可扩展性和可靠性。尽管数据库管理系统使用的许多算法和概念都是教科书的材料，但关于使数据库管理系统工作的系统设计问题的文献中有相对稀少的报道。本文介绍了DBMS设计原则的架构讨论，包括

+ 进程模型
+ 并行体系结构
+ 存储系统设计
+ 事务系统实现
+ 查询处理器
+ 查询优化器体系结构
+ 其他典型的组件和工具。

并且参考一些成功的商业和开源系统，不同的组织基于不同的方案实现了DBMS。

# 1. 介绍

​	数据库管理系统（DBMS）是复杂的、关键的软件系统。 今天的DBMS体现了数十年的学术和工业研究以及紧锣密鼓的企业软件开发。 数据库系统是最早被广泛部署的在线服务器系统之一，因此，它已经率先推出了不仅包括数据管理，还包括应用程序，操作系统和网络服务的设计解决方案。 早期的数据库管理系统是计算机科学中最具影响力的软件系统之一，数据库管理系统开创的想法和实现问题，被广泛复制和重新创造。	

​	出于多种原因，数据库系统体系结构的教训并不像应该那样广为人知。 首先，实际的数据库系统社区相当小。 由于市场倾向于少数头部玩家，因此只有少数几个成功的DBMS实现方案存在。 参与设计和实现数据库系统的人关系十分紧密：许多人参加了同一所学校，参与了相同的有影响力的研究项目，并合作了相同的商业产品。 其次，对数据库系统的学术处理往往忽视了架构问题。在数据库系统的教科书陈述中，传统上主要集中在算法和理论问题上 —— 这对于教学，研究和测试来说是很自然的 —— 而没有在整体实现中，全面地讨论系统架构。 总而言之，关于如何构建数据库系统的许多传统知识是可用的，但其中很少被写下或广泛传播。	

​	在本文中，我们尝试抓住现代数据库系统架构设计的主要方面，并讨论高级主题。其中一些出现在文献中，我们在相应的地方给出了我们引用。其他问题被藏在在产品手册中，有些仅仅是社区口头传述的一部分。在适用的情况下，我们使用商业和开源系统作为讨论的各种架构形式的例子。然而，由于字数的限制，就不列举代码中的例外情况和细微差别，这其中大部分已经超过十年之久。我们的目标是关注整体系统设计和压力问题，而这些问题通常在教科书中没有讨论过，为更广为人知的算法和概念提供了有用的背景。我们假设读者熟悉教科书数据库系统知识（例如[72]或[83]）以及现代操作系统（如UNIX，Linux或Windows）的基础设施。在下一节中介绍了DBMS的高级架构之后，我们在第1.2节中的每个组件上提供了一些关于背景介绍的参考文献。

## 1.1 关系代数系统：查询的生命之源

![](/image/arch_db.jpeg)

​	目前生产中最成熟和应用最广泛的数据库系统是关系数据库管理系统（RDBMS）。 这些系统可以作为全球大部分应用基础设施的核心，包括电子商务，医疗记录，计费，人力资源，工资单，客户关系管理和供应链管理等等。 电商和社交网站的出现只增加了它们的使用量和应用场景。 关系系统充当几乎所有在线交易和大多数在线内容管理系统（博客，维基，社交网络等）背后的信息存储仓库。 除了作为重要的软件基础设施外，RDBMS还可以作为未来可能出现的DBMS新扩展和革命的容易理解的参考方案。 因此，我们在本文中关注关系数据库系统。

​	本质上，典型的RDBMS有五个主要组件，如图所示。 作为对这些组件的介绍以及它们的组合方式，我们逐步了解一个查询在数据库系统中的生命。 这也是本文其余部分的概述。

​	考虑一个简单但典型的机场数据库交互，检票员点击表格以查看乘客列表中的航班。 这个按钮点击会产生一个大致如下所示的单一查询事务：

1. CCM：机场门口的个人计算机（“客户”）调用API，然后通过网络进行通信，以建立与DBMS的Client Communications Manager（图的顶部）的连接。 在某些情况下，这个连接在客户端和数据库服务器之间直接建立，例如通过ODBC或JDBC连接协议。这种方式被称为“双层”或“CS”系统。在其他情况下，客户端可以与“中间层服务器”（web服务器，事务处理监视器等）进行通信，后者又使用协议来代理客户端和DBMS之间的通信。这通常被称为“三层”系统。在基于Web的许多情况下，Web服务器和DBMS之间还有另一个“应用程序服务器”层，从而产生四层。鉴于这些不同的选择，典型的DBMS需要与各种客户端驱动程序和中间件系统所使用的许多不同的连接协议兼容。但是，在所有这些协议中，Client Communications Manager的职责大致相同：**建立并记住调用者（不管它是客户端还是中间件服务器）的连接状态，以响应SQL来自调用者的命令，并且适当地返回数据和控制消息（结果代码，错误等）**。在我们的简单示例中，Client Communications Manager将建立客户端的安全凭证，设置状态以记录跨连接的新连接和当前SQL命令的详细信息，并将客户端的第一个请求进一步地转发到DBMS中进行处理。
2. PM：在收到客户端的第一条SQL命令后，DBMS必须为该命令分配一个“计算线程”。 它还必须确保线程的数据和控制输出通过CCM连接到客户端。 这些任务是DBMS Process Manager的工作（图的左侧）。 数据库管理系统在查询阶段需要做的最重要的决定是关于**准入控制**：系统是应该立即开始处理查询，还是推迟到有足够的系统资源可用于查询时，才执行。 我们在第2节详细讨论Process Manager。
3. RQP：一旦被接纳并分配为控制线程，检票员的查询就可以开始执行。 它通过调用Relational Query Processor中的代码（图的中心）来实现。 这组模块检查用户是否有权运行查询，并将用户的SQL查询文本编译为内部查询计划。 编译完成后，生成的查询计划将通过plan executer处理。 plan excuter包含一套用于执行任何查询的“运算符”（基于关系算法实现）。 典型的操作符实现了关系查询处理的任务，包括连接，选择，投影，聚合，排序等，以及从系统底层扫描数据的方法。 在我们的示例查询中，调用这些运算符的一小部分（由查询优化器组合）以满足检票员的查询。 我们在第4节讨论Query Processer。
4. 在检票员的查询计划的基础上，存在一个或多个运算符来从数据库请求数据。这些操作从DBMS的Transactional Storage Manager（图底部）获取数据，该模块管理所有数据访问（读取）和操作（创建，更新，删除）调用。存储系统包括用于组织和访问磁盘上数据的算法和数据结构（“access method”），包括表和索引等基本结构。它还包括一个buffer manager模块，用于决定在磁盘和内存缓冲区之间传输何时以及要传输什么数据。回到我们的例子，在基于access method访问数据的过程中，查询必须调用transactions代码以确保事务的众所周知的“ACID”属性 。在访问数据之前，从lock manager中获取锁以确保在其他并发查询面前正确执行。如果门户代理的查询涉及对数据库的更新，它将与log manager进行交互，以确保交易在提交时是**持久的**，如果中止则undo。在第5节中，我们将更详细地讨论存储和缓冲区管理;第6节介绍事务**一致性**体系结构。
5. 查询进行到这一步，它已经开始访问数据记录，并准备使用它们计算客户端的结果。这是通过“堆栈展开”我们描述的工作完成的。访问方法将控制权返回给查询执行器的操作，该操作员编排数据库数据的结果元组的计算;因为结果元组被生成，所以它们被放置在客户端通信管理器的缓冲区中，该管理器将结果发回给调用者。对于较大的结果集，客户端通常会进行额外的调用以从查询中增量获取更多数据，从而导致通过通信管理器，查询执行器和存储管理器进行多次迭代。在我们的简单例子中，在查询结束时，事务完成并且连接关闭;这会导致事务管理器清理事务的状态，流程管理器释放查询的任何控制结构，并且通信管理器清除连接的通信状态。

​	我们对这个示例查询的讨论涉及了RDBMS中的许多关键组件，但不是全部。 图1.1的右侧描述了许多共享组件和实用程序，它们对于全功能DBMS的操作至关重要。 目录和内存管理器在任何事务处理过程中都被调用为工具，包括我们的示例查询。 查询处理器在验证，解析和查询优化期间使用该目录。 无论何时需要动态分配或释放内存，内存管理器都会用于整个DBMS。 图1.1最右边框中列出的其余模块是独立于任何特定查询运行的实用程序，使数据库整体保持良好调整和可靠。 我们在第7节讨论这些共享组件和实用程序。

## 1.2 概述

​	在本文的大部分内容中，我们将重点放在支持核心数据库功能的体系结构基础上。我们不试图对文献中大量记录的数据库算法进行综合评述。我们对现代数据库管理系统中许多扩展的讨论也只是极少讨论，其中大部分扩展提供了超越核心数据管理的功能，但不会显着改变系统架构。
我们开始讨论数据库系统的整体架构。任何服务器系统架构中的第一个主题是其整体流程结构，我们在这方面探索了各种可行的替代方案，首先针对单处理器机器，然后针对当今可用的各种并行架构。关于核心服务器系统体系结构的讨论适用于各种系统，但在数据库管理系统设计方面很有先例。接下来，我们从DBMS的更多特定于域的组件开始。我们从一个查询的系统视图开始，关注于关系查询处理器。随后，我们进入存储架构和事务性存储管理设计。最后，我们介绍大多数DBMS中存在的一些共享组件和实用程序，但很少在教科书中讨论。