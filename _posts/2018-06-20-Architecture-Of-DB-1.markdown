---
layout: post
title: Process Models
subtitle: 译
date: 2018-06-20 20:45
header-img: "img/head.jpg"
categories: jekyll update
tags:
  - DB
---

在设计任何多用户服务器时，需要尽早做出关于并发用户请求的执行以及这些请求如何映射到操作系统进程或线程的决定。 这些决策对系统的软件体系结构，以及跨操作系统的性能，可扩展性和可移植性有着深远的影响1.在本节中，我们考察了DBMS过程模型的许多选项，这些选项用作模板 对于其他高度并发的服务器系统。 我们从一个简化的框架开始，假设线程具有良好的操作系统支持可用性，并且我们最初只针对单处理器系统。 然后，我们对这个简化的讨论进行扩展，以处理现代DBMS如何实现其过程模型的现实情况。 在第3节中，我们讨论利用计算机集群以及多处理器和多核系统的技术。

下面的讨论依赖于这些定义：

+ 操作系统进程将操作系统（OS）程序执行单元（控制线程）与该进程专用的地址空间相结合。 为进程维护的状态包括操作系统资源句柄和安全上下文。 这个单一的程序执行单元由OS内核调度，每个进程都有自己独特的地址空间。

+ 操作系统线程是OS程序执行单元，没有额外的私有操作系统上下文，也没有私有地址空间。 每个操作系统线程都可以完全访问在同一个多线程操作系统进程中执行的其他线程的内存。 线程执行由操作系统内核调度程序调度，这些线程通常称为“内核线程”或k线程。

+ 轻量级线程包是一个应用程序级别的结构，支持单个OS进程中的多个线程。 与OS调度的OS线程不同，轻量级线程由应用程序级线程调度程序调度。 轻量级线程和内核线程之间的区别在于，在用户空间中调度轻量级线程，而无需内核调度程序参与或知识。 用户空间调度程序及其所有轻量级线程的组合在单个OS进程中运行，并作为单个执行线程显示给OS调度程序。

  ​	与OS线程相比，轻量级线程具有更快的线程切换优势，因为不需要执行OS内核模式切换来安排下一个线程。 但是，轻量级线程的缺点是，任何线程的任何阻塞操作（例如同步I / O）都会阻塞进程中的所有线程。 这可以防止任何其他线程在一个线程被阻塞等待OS资源时进展。 轻量级线程包通过（1）仅发布异步（非阻塞）I / O请求和（2）不调用任何可能阻塞的操作系统操作来避免这种情况。 通常，轻量级线程提供比编写基于OS进程或OS线程的软件更困难的编程模型。

+ 一些DBMS实现自己的轻量级线程（LWT）包。 这些是一般LWT包的特例。 我们将这些线程称为DBMS线程，当DBMS，一般LWT和OS线程之间的区别对于讨论而言并不重要时，我们将这些线程称为DBMS线程。

+ DBMS客户端是实现应用程序用来与DBMS通信的API的软件组件。一些示例数据库访问API是JDBC，ODBC和OLE / DB。此外，还有各种各样的专有数据库访问API集。有些程序使用嵌入式SQL编写，这是一种将编程语言语句与数据库访问语句混合在一起的技术。这首先是在IBM COBOL和PL / I中提供的，后来在SQL / J中实现了Java的嵌入式SQL。嵌入式SQL由预处理器处理，可将嵌入式SQL语句转换为直接调用数据访问API。无论客户端程序中使用什么语法，最终结果都是对DBMS数据访问API的一系列调用。对这些API的调用由DBMS客户端组件封送并通过某种通信协议发送到DBMS。协议通常是专有的，通常没有文件。过去，为了标准化客户端到数据库通信协议已经做出了一些努力，Open Group DRDA可能是最着名的，但没有一个得到广泛采用。

+ DBMS Worker是代表DBMS客户端工作的DBMS中的执行线程。 DBMS工作者和DBMS客户端之间存在1：1映射：DBMS工作者处理来自单个DBMS客户端的所有SQL请求。 DBMS客户端将SQL请求发送到DBMS服务器。 工作人员执行每个请求并将结果返回给客户端。 在下文中，我们调查了商业DBMS用于将DBMS工作者映射到OS线程或进程上的不同方法。 当区别很大时，我们会将它们称为工作线程或工作进程。 否则，我们将它们简称为工人或DBMS工作者。