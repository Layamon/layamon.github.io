---
layout: post
title: 说说分布式数据库
date: 2016-08-30 22:00
header-img: "img/head.jpg"
categories: jekyll update
---

> 如雨后春笋般，出来众多的分布式数据库。到底什么是分布式数据库? 是数据库集群么？
> 感觉只要是不是一个数据库节点在提供数据库服务，都能说自己是分布式数据库;
> 简单理解就是，分布式是以缩短单个任务的执行时间来提升效率的，而集群则是通过提高单位时间内执行的任务数来提升效率,
> 最近面试问了一个问题，为什么用PostgreSQL做分布式数据库，一时竟不知道从哪里来回答？PostgreSQL的主从复制的特性？代码清晰易于扩展？
> 判断一个数据库适不适合做分布式，从哪几个点来判断？主备的实现方式？系统架构？

### 分布式or集群

如果一个任务由10个子任务组成，每个子任务单独执行需1小时，则在一台服务器上执行改任务需10小时。

采用分布式方案，提供10台服务器，每台服务器只负责处理一个子任务，不考虑子任务间的依赖关系，执行完这个任务只需一个小时。
(这种工作模式的一个典型代表就是Hadoop的Map/Reduce分布式计算模型）
而采用集群方案，同样提供10台服务器，每台服务器都能独立处理这个任务。
假设有10个任务同时到达，10个服务器将同时工作，10小后，10个任务同时完成，这样，整身来看，还是1小时内完成一个任务！
同样都是为了扩展单点的计算能力，采用的不同的改进架构

##### 集群

关键特性

1. 可扩展性
2. 高可用性

两大能力：

1. 负载均衡
2. 错误恢复

两大技术：

1. 集群地址

> 集群由多个服务实体组成，集群客户端通过访问集群的集群地址获取集群内部各服务实体的功能。
> 具有单一集群地址（也叫单一影像）是集群的一个基本特征。
> 维护集群地址的设置被称为负载均衡器。
> 负载均衡器内部负责管理各个服务实体的加入和退出，外部负责集群地址向内部服务实体地址的转换。
> 有的负载均 衡器实现真正的负载均衡算法，有的只支持任务的转换。
> 只实现任务转换的负载均衡器适用于支持ACTIVE-STANDBY的集群环境，在那里，集群中只有 一个服务实体工作，当正在工作的服务实体发生故障时，负载均衡器把后来的任务转向另外一个服务实体。

2. 内部通信

##### 分布式

而分布式的解决方案，就是数据库产品本身就是分布式的，在原先单机数据库的架构上，
演变成包含一些分布式的组件一个新产品,演变历程从NoSQL到NewSQL

数据库的出现最开始是为了将程序和数据进行分离，专门开发的管理数据的产品。
起初有Object-oriented DBMS和relational model DBMS等产品，
但是前者并没有SQL这种标准的接口，并没有推广开。

起初做扩展的动机，就是单节点的数据库满足不了类似于互联网应用这种的高并发请求，并且每个还可能是长连接。
要么垂直扩展，添加硬件成本，但是这种扩展，并不能够对应用透明，扩展的时候数据库就要停机。

要么，水平扩展，动态的添加节点。

然而,如何水平扩展呢，distributed database or database cluster？

##### 实现

首先是通过数据库中间件的方式实现，中间件对用户展现的是单个数据库，请求是被转发到下层的数据库完成的。
这种情况下，对于操作一个记录读写还好，操作多个记录的话，如果确保事务以及Join tables的话，就不太好搞了。
遇到这种问题，那么就需要一个分布式数据库了，而不是一个数据库集群。

然后，做一个分布式数据库需要完成数据库的事务，并且要支持数据库的关系型查询。
可是，一些上层应用可能只是想做一些简单的查询即可，这些事务和关系模型并没什么用。
使用SQL有点多此一举。这就催生出了NoSQL（Not only SQL），抛弃上了上述两个特性，使得系统获得很好的扩展性。
比较著名的就是 大Google的BigTable和Amazon的Dynamo，以及一些衍生品。

但是Nosql使得开发者在数据一致性花了很多工作.
解决这个问题`，要么就是切换回DBMS来垂直扩展，要么就是开发一个中间件，来处理分布式系统的事务。
两者都太麻烦了，技术也回退了，这时候就出现了NewSQL。

NewSQL的目标就是，能够提供和NoSql相同的、针对OLTP的读写负载的扩展性，以及提供ACID的事务，同时保留关系模型SQL。
注意到，NewSQL的目标是支持如下的应用场景:

1. short-live 
2. small subset of data 
3. repetitive(简单重复的查询，只是每次查询的参数不同，这要和OLAP的复杂的大查询区分开

而目前出现了一个针对OLAP的分布式数据库，则是解决OLAP的应用，
这些应用面向的是只读的查询，操作的数据集很大，复杂的分析型查询。
比如 GreenPlum，Aster Data, Vertica。
另外，对于NewSQL，一些人给出了更狭义的定义：1) 使用无锁的并发控制 2) 使用shared-nothing的分布式架构

##### NewSQL的产品分类：

1. 从0开发的NewSQl数据库系统
    Clustrix , CockroachDB , Google Spanner , H-Store , HyPer , MemSQL , NuoDB , SAP HANA , VoltDB .
2. 基于之前为实现数据库的扩展而开发的中间件的二次开发
    AgilData Scalable Cluster 2 , MariaDB MaxS- cale , ScaleArc , ScaleBase3.
3. 云计算提供商的Daas服务
    Amazon Aurora , ClearDB .

其中基于中间件的方式，位于系统中心的中间件，需要完成工作：

1. routes queries
2. coordinates transactions
3. manages data placement
4. replication
5. partitioning across the nodes

#### 关注一个NewSQL系统的几个点

1. 内存存储

2. 分区分片

3. 并发控制

4. 二级索引

5. 复制同步

6. 错误恢复

#### OLTP or OLAP? HTAP!

目前一个数据库系统，总是要么针对OLTP，或者OLAP。
想要同时满足不同类似的负载要求，就需要整合不同的系统

1. 整合面向不同负载的数据库在一起，OLTP作为前端数据库，OLAP作为后端数据库

2. 整合离线批处理(Hadoop/spark)和实时流计算(stream)，比如Splice Machine 这个SQL on HAdoop公司

3. 一个HTAP DBMS 同时支持OLTP的低延迟高吞吐的OLTP负载，
并且允许在热数据（transactionacl），和冷数据（historical）上的复杂的，耗时长的OLAP查询。
并且使用面向两者的优化技术，OLTP（in-memory storage, lock-free execution）。OLAP（columnar storage, vectorized execution）
比如，SAP HANA and MemSQL

#### 为什么要选择Postgresql来做分布式数据库

1. PostgreSQL社区环境不错，基于PG能有很好的社区资源
2. 强大的SQL支持能力，和丰富的统计函数和统计语法支持，除了ANSI SQL外，还支持一些分析函数（window窗口函数），支持多种语言来写存储过程
3. 查询优化器对于子查询，复制查询，多表Join优化能力强，多表Join是OLAP分析常用的操作，Mysql就不行了，而Mysql更适合OLTP的任务
4. Postgresql的扩展性好，开发新的功能模块，数据类型，索引类型都很方便，按照API接口进行即可
5. ACID事务处理，数据强一致性保证，数据类型支持，独特的MVCC带来高效的数据更新能力
6. 没有大公司控制，社区纯洁，版本和路线控制好，用户可控性更强，Mysql分支太多了
7. 可以很好的兼容Postgresql的功能，postgresql的功能和接口基本都可用，odbc,jdbc,oledb,... 等，所以可以方便与第三方工具，BI报表集成时候很容易；

Postgresql + 并行调度 + 分布式事务两阶段提交

以上，参考论文 ：What’s Really New with NewSQL?
