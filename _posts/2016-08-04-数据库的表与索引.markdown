---
layout: post
title: 数据库实现——表的存储类型
subtitle: 主要有两种，索引组织表和堆表，另外有个聚簇表，主要是如果有一些表经常会在某些键上join，那么物理上，就把他们放在一起。
date: 2016-08-04 13:01
header-img: "img/head.jpg"
categories: jekyll update
tags:
    - DataBase
---

#### 索引组织表

*表既是索引，索引即是表*
存储空间相对堆表要小，因为不需要给表和索引都分配空间，基于主键的访问效率高了。
这种方式，再要见其他索引都是基于这个主键索引来建的，并且不能像head表上的索引，
每个索引叶子节点包含索引列的内容了指向对应表中行的物理rowid。因为IOT的每一行的
物理位置不会一成不变，如果有数据插入的话，因为IOT是按照主键排序的，因此数据行在IOT的索引树
中的物理位置很可能会发生变化。

优点：
1. 对于主键列的查询必然会好

缺点：
1. 当主键数据随机写入的时候，由于不是顺序写入，会经常调整索引进行分裂，IO放大
2. 其他二级索引都是基于主键键值的逻辑rowid建立的。因此，二级索引要范围查找数据需要找到主键
然后，按照主键索引来找，这时候有可能就是离散IO，效率似乎就不是很好了。

#### 堆表

插入的时候不需要调整，比上面的快，但是查询的时候就慢了，
相应就不会有二级索引了，因为都是一级索引。可能会有人说了，这样表数据的更新会
影响到和该表相关的所有索引，但也只是更新了索引字段的数据才会更新，在PG里，新旧数据放在一起，
放在同一页中,即为产生该数据的一个新版本。这是和PG的MVCC相关，PG是基于多版本实现的MVCC
