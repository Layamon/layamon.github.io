---
layout: post
title: Cstore
subtitle: citusdb开源的列存扩展插件
date: 2016-07-05 09:18
header-img: "img/head.jpg"
tags:
    - DataBase
---

## Cstore文件结构

cstore表文件分为两部分，table footer file 和 table data file

#### table footer file
```
/*
 * StripeMetadata represents information about a stripe. This information is
 * stored in the cstore file's footer.
 */
typedef struct StripeMetadata
{
	uint64 fileOffset;
	uint64 skipListLength;
	uint64 dataLength;
	uint64 footerLength;

} StripeMetadata;


/* TableFooter represents the footer of a cstore file. */
typedef struct TableFooter
{
	List *stripeMetadataList;
	uint64 blockRowCount;

} TableFooter;
```
其中存有stripeMetadataList，就是table data 文件中各个stripe的元信息；
每个stripe分为三部分：
stripe skip list 
column data 
stripe footer 。
元信息中存下了每个stripe在文件中的偏移，以及各部分的长度，便于读取各个部分的信息。


#### table data file
![csoredatafile](/image/cstore-file-layout.jpg)
其由很多stripe构成；
每个stripe中是按列存放的，
每列数据包括exists序列、 value序列 物理上，exists序列是连续存放的，同样，value序列也是连续存放的，放在exists后面;

逻辑上，exists和value都分成若干块，由于每个block中的rowcount不能超过在table footer中定义blockrowcount的大小，所以逻辑上每列分成相同几块，columndata就像是一个二维数组，二维数组的某个元素就是某一列的某一块（这里的block不是磁盘上的block）。
```
/*
    * StripeSkipList can be used for skipping row blocks. It contains a column block
     * skip node for each block of each column. blockSkipNodeArray[column][block]
      * is the entry for the specified column block.
       */
typedef struct StripeSkipList
{
        ColumnBlockSkipNode **blockSkipNodeArray;
            uint32 columnCount;
                uint32 blockCount;

} StripeSkipList;

```
每个stripe都有一个stripe skip list,其中有一个二维的数组: blockskipnodearray[][]
blockskipnodearray[ci][bi] 便是第ci列的第bi块的信息，其中有该块的列是否有最大最小值，最大最小值是什么，该块有多少行，该块的exist序列在整个的exists序列中的偏移及长度，该块的value序列在整个的value序列中的偏移及长度，压缩类型
```
/*
    * StripeSkipList can be used for skipping row blocks. It contains a column block
     * skip node for each block of each column. blockSkipNodeArray[column][block]
      * is the entry for the specified column block.
       */
typedef struct StripeSkipList
{
        ColumnBlockSkipNode **blockSkipNodeArray;
            uint32 columnCount;
                uint32 blockCount;

} StripeSkipList;
```
每次读取一个stripe的时候，首先读取stripe footer,其中包含三个数组，长度就是columncount, 分别存有每列的skip list size, exist序列的size，value序列的size.


## Cstore的读取写入

### 读取

读取数据首先先读取 table footer中的信息，信息存入readstate，readstate记录了当前读到哪个stripe了，以及一个stripebuffer, stripe buffer 就是已经用 project column 和 where clause 将column data过滤过了。（将一个大的二维数组过滤成一个小的二维数组，project column将不用的列过滤掉，where clause将不用的行过滤掉。）
    每次需要返回的一行数据时，从stripebuffer中读取一行数据，对于已经过滤掉的列，就被设置成null了。

### 写入

writestate中维护了一个当前正在写的stripe，当我们要写入行数据时，添加到当前的stripe中，在每列数据后追加，同时更新相应的skip node,当每个block写满后，这整个block就被压缩，然后，如果总的行数达到stripemaxrowcount，就将这个stripe写盘，更新table footer中的元信息
